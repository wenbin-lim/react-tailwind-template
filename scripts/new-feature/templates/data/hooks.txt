import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { z } from "zod";

/* 
	Data provider methods
	- create your own data provider methods or use the ones provided by @src/lib/dataProvider
*/
import {
  getFullList,
  getPaginatedList,
  getOne,
  addOne,
  updateOne,
  deleteOne,
} from "@src/lib/dataProvider";

/* 
	Constants and Types

	Query Keys: https://tkdodo.eu/blog/effective-react-query-keys
*/
const KEY = "%featureCamelCase%";

export const %featurePascalCase%Schema = z.object({
  name: z.string(),
  title: z.string(),
  description: z.string(),
});

export type %featurePascalCase% = z.infer<typeof %featurePascalCase%Schema> & {
  id: string;
};

// get full list
export const useGetFullList%featurePascalCase% = () => {
  return useQuery({
    queryKey: [KEY, "list"],
    queryFn: () => getFullList<%featurePascalCase%>({ collectionName: KEY }),
  });
};

// get paginated list
export const useGetPaginatedList%featurePascalCase% = (page: number, perPage: number) => {
  return useQuery({
    queryKey: [KEY, "list", { pagination: { page, perPage } }],
    queryFn: () =>
      getPaginatedList<%featurePascalCase%>({ collectionName: KEY, page, perPage }),
  });
};

// get single record
export const useGetOne%featurePascalCase% = ({
  id,
  enabled,
}: {
  id: string;
  enabled?: boolean;
}) => {
  return useQuery({
    queryKey: [KEY, "detail", id],
    queryFn: () => getOne<%featurePascalCase%>({ collectionName: KEY, id }),
    enabled,
  });
};

// add one record
export const useAddOne%featurePascalCase% = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (newData: %featurePascalCase%) =>
      addOne<%featurePascalCase%>({ collectionName: KEY, newData }),
    onSuccess: () => {
      queryClient.invalidateQueries({
        queryKey: [KEY, "list"],
      });
    },
  });
};

// update one record
export const useUpdateOne%featurePascalCase% = (id: string) => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (newData: %featurePascalCase%) =>
      updateOne<%featurePascalCase%>({ collectionName: KEY, id, newData }),
    onSuccess: () => {
      queryClient.invalidateQueries({
        queryKey: [KEY, "list"],
      });
    },
  });
};

// delete one record
export const useDeleteOne%featurePascalCase% = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (id: string) => deleteOne({ collectionName: KEY, id }),
    onSuccess: () => {
      queryClient.invalidateQueries({
        queryKey: [KEY, "list"],
      });
    },
  });
};
