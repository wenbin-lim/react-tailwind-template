import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { z } from "zod";

import {
  getFullList,
  getPaginatedList,
  getOne,
  addOne,
  updateOne,
  deleteOne,
} from "@src/lib/backend";

/* 
  Query keys, schemas and types

	Structure query keys: https://tkdodo.eu/blog/effective-react-query-keys
*/
export const KEY = "%collectionName%";

export const %recordPascalName%Schema = z.object({
  name: z.string(),
});

export type %recordPascalName% = z.infer<typeof %recordPascalName%Schema> & {
  id: string;
};

/* 
  Data provider hooks
*/
// get full list
export const useGetFullList%recordPascalName% = () => {
  return useQuery({
    queryKey: [KEY, "list"],
    queryFn: () =>
      getFullList<%recordPascalName%>({
        collection: KEY,
        options: {
          sort: "-created",
        },
      }),
  });
};

// get paginated list
export const useGetPaginatedList%recordPascalName% = (page: number, perPage: number) => {
  return useQuery({
    queryKey: [KEY, "list", { pagination: { page, perPage } }],
    queryFn: () =>
      getPaginatedList<%recordPascalName%>({
        collection: KEY,
        page,
        perPage,
        options: {
          sort: "-created",
        },
      }),
  });
};

// get single record
export const useGetOne%recordPascalName% = (id: string) => {
  return useQuery({
    queryKey: [KEY, "detail", id],
    queryFn: () => getOne<%recordPascalName%>({ collection: KEY, id }),
    enabled: !!id
  });
};

// add one record
export const useAddOne%recordPascalName% = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (newRecord: %recordPascalName%) =>
      addOne<%recordPascalName%>({ collection: KEY, newRecord }),
    onSuccess: () => {
      queryClient.invalidateQueries({
        queryKey: [KEY, "list"],
      });
    },
  });
};

// update one record
export const useUpdateOne%recordPascalName% = (id: string) => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (newRecord: %recordPascalName%) =>
      updateOne<%recordPascalName%>({ collection: KEY, id, newRecord }),
    onSuccess: () => {
      queryClient.invalidateQueries({
        queryKey: [KEY, "list"],
      });
      queryClient.invalidateQueries({
        queryKey: [KEY, "detail", id],
      });
    },
  });
};

// delete one record
export const useDeleteOne%recordPascalName% = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: (id: string) => deleteOne({ collection: KEY, id }),
    onSuccess: () => {
      queryClient.invalidateQueries({
        queryKey: [KEY, "list"],
      });
    },
  });
};
